CREATE SCHEMA IF NOT EXISTS MealPlanner AUTHORIZATION admin;

-- Create the Users table
CREATE TABLE IF NOT EXISTS MealPlanner.Users (
    user_id SERIAL PRIMARY KEY,
    name VARCHAR(255),
    email VARCHAR(255) UNIQUE,
    password VARCHAR(255),
    dietary_restrictions VARCHAR(255)
);

-- Create the Recipes table
CREATE TABLE IF NOT EXISTS MealPlanner.Recipes (
    recipe_id SERIAL PRIMARY KEY,
    name VARCHAR(255),
    description TEXT,
    ingredients TEXT,
    ingredients_raw TEXT,
    instructions TEXT,
    servings INTEGER,
    serving_size VARCHAR(255),
    tags TEXT
);

-- Create the Meal_Plans table
CREATE TABLE IF NOT EXISTS MealPlanner.Meal_Plans (
    meal_plan_id SERIAL PRIMARY KEY,
    user_id INTEGER references MealPlanner.Users(user_id),
    date DATE
);

-- Create the Reviews table
CREATE TABLE IF NOT EXISTS MealPlanner.Reviews (
    review_id SERIAL PRIMARY KEY,
    recipe_id INTEGER references MealPlanner.Recipes(recipe_id),
    user_id INTEGER references MealPlanner.Users(user_id),
    score INTEGER,
    review_text VARCHAR(1000)
);

-- Create the MealPlan_Recipes junction table
CREATE TABLE IF NOT EXISTS MealPlanner.MealPlan_Recipes(
    meal_plan_id INTEGER,
    recipe_id INTEGER,
    PRIMARY KEY (meal_plan_id, recipe_id),
    CONSTRAINT fk_meal_plan
            FOREIGN KEY(meal_plan_id)
    	        REFERENCES MealPlanner.Meal_Plans(meal_plan_id)
    	        ON DELETE CASCADE,
        CONSTRAINT fk_recipe
            FOREIGN KEY(recipe_id)
    	        REFERENCES MealPlanner.Recipes(recipe_id)
    	        ON DELETE CASCADE
    );

-- Create the Saved_Recipes junction table
CREATE TABLE IF NOT EXISTS MealPlanner.Saved_Recipes (
    user_id INTEGER,
    recipe_id INTEGER,
    PRIMARY KEY (user_id, recipe_id),
    CONSTRAINT fk_user
        FOREIGN KEY(user_id)
	        REFERENCES MealPlanner.Users(user_id)
	        ON DELETE CASCADE,
    CONSTRAINT fk_recipe
        FOREIGN KEY(recipe_id)
	        REFERENCES MealPlanner.Recipes(recipe_id)
	        ON DELETE CASCADE
);